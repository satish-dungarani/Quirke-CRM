@model UserRegisterModel

@{
    ViewData["Title"] = "Register";
    Layout = "";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Quirke | Registration Page</title>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">

    <link href="~/quirke/css/adminlte.min.css" rel="stylesheet" />
    <link href="~/quirke/login/font/bootstrap-icons.min.css" rel="stylesheet" />
    <link href="~/quirke/login/css/icheck-bootstrap.min.css" rel="stylesheet" />

</head>
<body class="register-page bg-body-secondary app-loaded">
    <div class="register-box">
        <div class="register-logo">
            <a href="/"><b>Quirke </b>CRM</a>
        </div>
        <div class="card">
            <div class="card-body register-card-body">
                <p class="login-box-msg">Register a new membership</p>
                <form id="ccSelectForm" asp-controller="Account" asp-action="SignUp" asp-id="SignUp" id="SignUp" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" onsubmit="return validateForm()">

                    <div class="form-group">
                        <div class="input-group">
                            <input asp-for="FirstName" type="text" class="form-control" placeholder="First name">
                            <div class="input-group-text">
                                <span class="bi bi-person"></span>
                            </div>
                        </div>
                        <span asp-validation-for="FirstName" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <div class="input-group mt-3">
                            <input asp-for="LastName" type="text" class="form-control" placeholder="Last name">
                            <div class="input-group-text">
                                <span class="bi bi-person"></span>
                            </div>
                        </div>
                        <span asp-validation-for="LastName" class="text-danger"></span>

                    </div>
                    <div class="form-group">
                        <div class="input-group mt-3">
                            <input asp-for="Email" type="email" class="form-control" placeholder="Email">
                            <div class="input-group-text">
                                <span class="bi bi-envelope"></span>
                            </div>
                        </div>
                        <span asp-validation-for="Email" class="text-danger"></span>

                    </div>
                    <div class="form-group">
                        <div class="input-group mt-3">
                            <input asp-for="UserName" type="text" class="form-control" placeholder="Username">
                            <div class="input-group-text">
                                <span class="bi bi-envelope"></span>
                            </div>
                        </div>
                        <span asp-validation-for="UserName" class="text-danger"></span>

                    </div>
                    <div class="form-group">
                        <div class="input-group mt-3">
                            <input asp-for="PhoneNumber" type="text" class="form-control" placeholder="Phone">
                            <div class="input-group-text">
                                <span class="bi bi-envelope"></span>
                            </div>
                        </div>
                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>

                    </div>
                    <div class="form-group">
                        <div class="input-group mt-3">
                            <input asp-for="Password" type="password" class="form-control" placeholder="Password">
                            <div class="input-group-text">
                                <span class="bi bi-lock-fill"></span>
                            </div>
                        </div>
                        <span asp-validation-for="Password" class="text-danger"></span>

                    </div>

                    <div class="row mt-3 mb-3">
                        <div class="col-8">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="agreeTerms" name="terms" value="agree">
                                <label class="form-check-label" for="agreeTerms">
                                    I agree to the <a href="#">terms</a>
                                </label>
                            </div>
                            <span id="termsError" class="text-danger" style="display:none;">You must agree to the terms</span>
                        </div>
                        <!-- /.col -->
                        <div class="col-4">
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">Register</button>
                            </div>
                        </div>
                        <!-- /.col -->
                    </div>
                </form>

                <a href="/Account/Login" class="text-center mt-3">I already have a membership</a>
            </div>
            <!-- /.form-box -->
        </div><!-- /.card -->
    </div>

    <!-- Scripts -->
    <script src="~/quirke/js/jquery-3.6.0.min.js"></script>

    <!-- Add jQuery UI JS -->
    <script src="~/quirke/js/jquery-ui.min.js"></script>
    <script src="~/quirke/js/jquery.validate.min.js"></script>
    <script src="~/quirke/js/additional-methods.min.js"></script>
    <script src="~/quirke/js/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/quirke/js/sweetalert2.all.min.js"></script>

    <script>
        $(document).ready(function () {
            var successMessage = '@TempData["SuccessMessage"]';
            var warningMessage = '@TempData["WarningMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';
            if (successMessage) {
                Swal.fire({
                    title: 'Success!',
                    text: successMessage,
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            }
            if (warningMessage) {
                Swal.fire({
                    title: 'Warning!',
                    text: warningMessage,
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
            }
            if (errorMessage) {
                Swal.fire({
                    title: 'Error!',
                    text: errorMessage,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });
    
        function validateForm() {
            var terms = document.getElementById("agreeTerms");
            var termsError = document.getElementById("termsError");

            if (!terms.checked) {
                termsError.style.display = "block";
                return false;
            } else {
                termsError.style.display = "none";
                return true;
            }
        }
    </script>
    <script>
        // Function to remove the unwanted elements
        function removeUnwantedElements() {
            // Remove the specific unwanted <center> tag with somee.com
            const unwantedElements = document.querySelectorAll("center a[href*='somee.com']");
            unwantedElements.forEach(function (element) {
                element.parentNode.remove();  // Remove <center> and its child <a>
            });


            // Remove divs with inline styles added by the server
            const unwantedDivs = document.querySelectorAll("div[style*='z-index: 2147483647'], div[style*='height: 65px']");
            unwantedDivs.forEach(function (div) {
                div.remove();
            });

            // Optionally, if you want to remove any remaining elements by text content
            const unwantedLinks = document.querySelectorAll("a[href*='somee.com']");
            unwantedLinks.forEach(function (link) {
                link.closest("div").remove();  // Remove the parent div containing the link
            });


            // Remove the specific <script> tag by matching part of its src attribute
            const unwantedScript = document.querySelector("script[src*='ads.mgmt.somee.com']");
            if (unwantedScript) {
                unwantedScript.remove();
            }
        }

        // Run the function initially to catch any elements already loaded
        document.addEventListener("DOMContentLoaded", function () {
            removeUnwantedElements();  // Remove any unwanted elements initially
        });

        // Use MutationObserver to monitor for dynamically inserted elements
        const observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                // Check each added node if it matches the unwanted content
                mutation.addedNodes.forEach(function (node) {
                    if (node.nodeType === 1) {  // Only process element nodes
                        removeUnwantedElements();  // Re-run the removal function
                    }
                });
            });
        });

        // Observe changes to the entire document's body
        observer.observe(document.body, {
            childList: true,  // Monitor for added/removed elements
            subtree: true     // Monitor the entire subtree
        });
    </script>
</body>
</html>